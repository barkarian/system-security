/---------Ευρεση Return Address σε σχεση με την αρχη του String------------/
Το πρωτο σταδιο της επιλυσης ειναι να βρουμε το ακριβως που (σε σχεση με την αρχη του Array(String) οπου γραφουμε) βρισκεται το Return Address.
Για την ευρεση του σημειου αυτου βαλαμε ενα συγκεκριμενο χαρακτηρα πολλες φορες μεσα στο String και παρακολουθησαμε απο τον debugger σε πιο ακριβως σημειο οριακα ο συγκεκριμενος χαρακτηρας πανογραφει ολο το Return Address.
Πιο συγκεκριμενα ξεραμε αυτη τη πληροφορια καθως το προγραμμα εσκαγε σε αυτο το σημειο καθως το Return Address δεν ειχε δεσμευτει απο το συγκεκριμενο Process και αρα το προγραμμα μας δεν μπορουσε να κανει Jump εκει.

/----------Κληση Shell συναρτησης μεσα απο την κληση του προγραμματος-----------/
Αφου βρηκαμε το binary αρχειο της εντολης που ανοιγει το shell το τοποθετησαμε ως String μεσα στο buffer επισης το καναμε padding με no operation εντολες 0χ90.Οι no operation εντολες θα βοηθουσαν περισσοτερο αν δεν ειχαμε στατικο κωδικα .Οπου ενδεχετε οι μνημες να μετακινουντε.
Σε αυτη τη περιπτωση αρκει το Return Address να βρισκετε σε μια απο ολες της No Operation εντολες για να εκτελεστει ο Malicious κωδικας μας δινοντας μας ανοχη στη μικρη μετακινιση της μνημης.

/----------Τελικη Return Address-----------/
Επισης στο σημειο αυτο αξιζει να σημειωθει οτι το Return Address επειδη εχουμε little Endian συστημα συμπληρωνεται αναποδα.
Επισης τελικα το Return Address το οποιο χρησιμοποιουμε ειναι αυτο που περνουμε απο την εντολη :
->  p &Name 
καθως αυτη εχει δικαιωματα να τρεξει και ειναι Global μεταβλητη που σημαινει οτι δεν υπαρχει περιπτωση αλλαγης τον τιμων της απο το προγραμμα.


/------------testShellCode.c---------------/
Αυτος ο κωδικας απλα περναει τον κωδικα για το ανοιγμα του Shell (Binary) σε ενα String και κατοπιν διχνετε απο ενα Pointer ως συναρτηση .Κατοπιν εκτελειτε.
Απο την εκτελεση αυτη καταλαβαινουμε οτι το Binary αρχειο ειναι σωστο.



/_____________________________________________/
/----------Χρηση και Testing κωδικα-----------/
/_____________________________________________/
Δεν αρκει να βαλουμε το Input οταν μας ρωταει το προγραμμα .
Αυτο διοτι θελουμε να κρατησουμε ανοικτο το stdin και να μπορουμε να συνεχισουμε να δινουμε εντολες στο Shell απο το πληκτρολογιο.
Για το λογο αυτο καλουμε ως εξης:
->  (cat input.txt ; cat)|./Greeter

Οπου το input.txt δημιουργειτε απο το Script στη python και εμπεριεχει το binary οπου υπολογισαμε παραπανω "no op"+"open shell"+"return address".
->  python malicious.py >input.txt

Επομενως για την εκτελεση του προγραμματος τρεχουμε 
->  python malicious.py >input.txt
->  (cat input.txt ; cat)|./Greeter

Για να τρεξουμε την testShellCode :
->  make
->  ./testShellCode
